<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>舒小胖的博客</title>
  
  <subtitle>挑战人生无极限，攀登人生更高峰</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shuperry.github.io/"/>
  <updated>2020-08-18T09:44:38.039Z</updated>
  <id>http://shuperry.github.io/</id>
  
  <author>
    <name>舒小胖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解 Vue2.0 概念</title>
    <link href="http://shuperry.github.io/2020/08/06/vue/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20Vue2.0%20%E6%A6%82%E5%BF%B5/"/>
    <id>http://shuperry.github.io/2020/08/06/vue/深入理解 Vue2.0 概念/</id>
    <published>2020-08-06T06:30:00.000Z</published>
    <updated>2020-08-18T09:44:38.039Z</updated>
    
    <content type="html"><![CDATA[<p>　　很多人经常在项目中使用 Vue，但是只停留在使用，没有深究其深层次的原理，理解 Vue 有助于我们写出质量更好的程序，深层次理解 JS 底层技术的应用，为使用新技术打好基础。<br><a id="more"></a></p><h3 id="Vue-的核心理念"><a href="#Vue-的核心理念" class="headerlink" title="Vue 的核心理念"></a>Vue 的核心理念</h3><hr><h4 id="为什么会有-Vue"><a href="#为什么会有-Vue" class="headerlink" title="为什么会有 Vue"></a>为什么会有 Vue</h4><p>首先我们来梳理以前的项目里的做法：<br>  1、在 html 中引入 js 和 css<br>  2、在 html 的 script 标签中写 js<br>  3、在前端写 java 代码<br>  4、同样的功能如果在其它地方还有用到，只怕只是个很小的改动，都需要再重写一遍<br>  5、使用 jQuery 等工具直接操作 dom</p><p>如果只是小项目，我们这么做完全可以接受，但是一旦项目达到一定规模，项目维护起来将是个灾难。</p><p>于是出现了 <code>Angular</code>、<code>React</code>，再然后出现了 <code>Vue</code>，关于这三个框架的比较，我们以后再继续说，这里只说 <code>Vue</code>。</p><p>Vue 的核心库只关心视图层，易于上手，也能够为复杂的单页面应用提供驱动。</p><h4 id="Vue-有什么特点"><a href="#Vue-有什么特点" class="headerlink" title="Vue 有什么特点"></a>Vue 有什么特点</h4><h5 id="轻量级"><a href="#轻量级" class="headerlink" title="轻量级"></a>轻量级</h5><p>Vue 组件会自动追踪组件实例中的自定义和计算属性，API 简单、灵活，页面中渲染数据使用类 Mustache 语法，读者很容易理解，可以很快上手。</p><h5 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h5><p>　　这个概念的官方叫法是响应式渲染，是官方核心概念之一，在组件的 data 函数中声明属性，在可输入元素中使用 v-model 指令绑定该属性，在页面内容有变化时，在组件中其它位置如果也有用到这个属性，会自动更新，同样，在组件内有业务操作修改了这个属性，在页面上也可以马上看到变化，并且响应极快。</p><h5 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h5><p>这是 Vue 核心概念之一，组件化的好处是提升代码的复用性，包括组件内部的业务逻辑代码、页面元素及样式，可以通过 <code>props</code> 参数实现组件在不同业务调用时的差异化，根据业务需要封装自定义组件，组件化不仅可以提升代码复用性，同样可以优化项目文件结构，在一个组件中只做一件事，单位业务逻辑代码量会减少很多，提升代码可读性和可维护性。</p><p>父组件向子组件传输数据可以使用 <code>props</code> ，子组件与父组件通信时，通过 <code>emit</code> 触发父组件的事件，来通知父组件改变数据。</p><h5 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h5><p>Vue 实现与页面交互，主要就是通过内置指令来实现，像 <code>v-for</code>、<code>v-if</code>、<code>v-bind</code>、<code>v-on</code> 等指令，很容易理解其用法。</p><p>同样我们也根据业务需要可以定制自己的指令，只需要在 Vue 实例中注册即可，一处定义，整个项目内部都可以使用。</p><h5 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h5><p>路由 <code>vue-router</code> 其实不在 Vue 的核心代码中，是作为插件的方式由官方开发的，与 Vue 深度集成，用于管理 url 路径与组件间的映射关系。</p><h5 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h5><p>我们知道 <code>React</code> 初开始流行的一大原因就是 <code>单向数据流</code>，为前端项目规范化提供了一个很好的概念，极大的提升了项目的维护便利性。</p><p><code>单向数据流</code> 的意思是将业务数据按模块整合到一起取名叫 <code>store</code>，每个模块存放数据的区域叫 <code>state</code>，页面上的每一个业务操作都发起一个动作 <code>action</code>，在 action 内部向后台发起请求，根据请求返回的数据来根据需要提交修改 <code>mutation</code>，则 mutation 来修改当前模块 <code>state</code> 中的数据，每个操作都遵循这个规范，再加上日志打印，在数据出现错误时很方便可以追踪到导致数据错误的操作，由此来定位业务逻辑错误，增加了很多便利性和逻辑可控性。</p><p>在 <code>Vue</code> 中同样也有状态管理，简单的模块内同步数据与页面效果使用成本更低 <code>双向数据绑定</code> 功能即可实现，但有更复杂的业务逻辑和很多组件共用数据时，更推荐的用法是官方的插件 <code>vuex</code>，该插件提供了与上述 React 一样的单向数据流管理逻辑。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　很多人经常在项目中使用 Vue，但是只停留在使用，没有深究其深层次的原理，理解 Vue 有助于我们写出质量更好的程序，深层次理解 JS 底层技术的应用，为使用新技术打好基础。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://shuperry.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="http://shuperry.github.io/tags/vue/"/>
    
      <category term="mvvm" scheme="http://shuperry.github.io/tags/mvvm/"/>
    
  </entry>
  
  <entry>
    <title>如何更新并自动同步 Linux 时间</title>
    <link href="http://shuperry.github.io/2017/02/07/linux/How-To-Update-Linux-Time/"/>
    <id>http://shuperry.github.io/2017/02/07/linux/How-To-Update-Linux-Time/</id>
    <published>2017-02-07T07:02:12.000Z</published>
    <updated>2020-08-06T06:26:05.005Z</updated>
    
    <content type="html"><![CDATA[<p>　　很多人经常会发现 Linux 的时间不知道什么时候就不对了，如果刚好是作为某个业务系统的后台或数据库服务器的话就会引来一系列的麻烦，系统里很多数据的时间不对了，对排错和处理数据也会带来相当的工作量，这篇文章主要是讲解如何更新并自动同步 Linux 的时间。<br><a id="more"></a></p><h4 id="只更新一次时间："><a href="#只更新一次时间：" class="headerlink" title="只更新一次时间："></a>只更新一次时间：</h4><hr><h5 id="安装-ntp-工具"><a href="#安装-ntp-工具" class="headerlink" title="安装 ntp 工具"></a>安装 ntp 工具</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install ntp -y</span><br></pre></td></tr></table></figure><h5 id="同步一次服务器时间"><a href="#同步一次服务器时间" class="headerlink" title="同步一次服务器时间"></a>同步一次服务器时间</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ntpdate -u us.pool.ntp.org</span><br></pre></td></tr></table></figure><h4 id="自动同步时间"><a href="#自动同步时间" class="headerlink" title="自动同步时间:"></a>自动同步时间:</h4><hr><h5 id="设置定时同步时间任务，每-10-分钟执行一次"><a href="#设置定时同步时间任务，每-10-分钟执行一次" class="headerlink" title="设置定时同步时间任务，每 10 分钟执行一次"></a>设置定时同步时间任务，每 10 分钟执行一次</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e</span><br></pre></td></tr></table></figure><p><strong>注: 在打开的窗口中输入 <code>*/10 * * * * /usr/sbin/ntpdate -u us.pool.ntp.org</code>。</strong></p><h5 id="如果发现上一步操作中提示没有-crontab-则请先执行此步骤安装-crontab-服务后再执行上一步操作"><a href="#如果发现上一步操作中提示没有-crontab-则请先执行此步骤安装-crontab-服务后再执行上一步操作" class="headerlink" title="如果发现上一步操作中提示没有 crontab, 则请先执行此步骤安装 crontab 服务后再执行上一步操作"></a>如果发现上一步操作中提示没有 <code>crontab</code>, 则请先执行此步骤安装 <code>crontab</code> 服务后再执行上一步操作</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum  install -y vixie-cron</span><br></pre></td></tr></table></figure><p>有些同学可能会问，时区的问题怎么处理？别急，下面附带时区相关操作。</p><h5 id="查看服务器时区"><a href="#查看服务器时区" class="headerlink" title="查看服务器时区"></a>查看服务器时区</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ date -R</span><br></pre></td></tr></table></figure><p><strong>注: 如果时区是 <code>+0800</code> 则表示为东八区，在国内的同学就不用去修改时区了。</strong></p><h5 id="修改服务器时区"><a href="#修改服务器时区" class="headerlink" title="修改服务器时区"></a>修改服务器时区</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf /etc/localtime</span><br><span class="line">$ ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><p><strong>注: 以上操作是将当前时区修改为上海时区。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　很多人经常会发现 Linux 的时间不知道什么时候就不对了，如果刚好是作为某个业务系统的后台或数据库服务器的话就会引来一系列的麻烦，系统里很多数据的时间不对了，对排错和处理数据也会带来相当的工作量，这篇文章主要是讲解如何更新并自动同步 Linux 的时间。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://shuperry.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://shuperry.github.io/tags/linux/"/>
    
      <category term="ntpdate" scheme="http://shuperry.github.io/tags/ntpdate/"/>
    
  </entry>
  
</feed>
