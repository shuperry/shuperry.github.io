<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[深入理解 Vue2.0 概念]]></title>
    <url>%2F2020%2F08%2F06%2Fvue%2F%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20Vue%20%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[很多人经常在项目中使用 Vue，但是只停留在使用，没有深究其深层次的原理，理解 Vue 有助于我们写出质量更好的程序，深层次理解 JS 底层技术的应用，为使用新技术打好基础。 Vue 的核心理念： 为什么会有 Vue首先我们来梳理以前的项目里的做法： 1、在 Html 中引入 js 和 css 2、在 html 的 script 标签中写 js 3、在前端写 java 代码 4、同样的功能如果在其它地方还有用到，只怕只是个很小的改动，都需要再重写一遍 5、使用 jQuery 等工具直接操作 dom 如果只是小项目，我们这么做完全可以接受，但是一旦项目达到一定规模，项目维护起来将是个灾难。 于是出现了 Angular、React，再然后出现了 Vue，关于这三个框架的比较，我们以后再继续说，这里只说 Vue。 Vue 的核心库只关心视图层，易于上手，也能够为复杂的单页面应用提供驱动。 Vue 有什么特点轻量级Vue 组件会自动追踪组件实例中的自定义和计算属性，API 简单、灵活，页面中渲染数据使用类 Mustache 语法，读者很容易理解，可以很快上手。 双向数据绑定 这个概念的官方叫法是响应式渲染，是官方核心概念之一，在组件的 data 函数中声明属性，在可输入元素中使用 v-model 指令绑定该属性，在页面内容有变化时，在组件中其它位置如果也有用到这个属性，会自动更新，同样，在组件内有业务操作修改了这个属性，在页面上也可以马上看到变化，并且响应极快。 组件化这是 Vue 核心概念之一，组件化的好处是提升代码的复用性，包括组件内部的业务逻辑代码、页面元素及样式，可以通过 props 参数实现组件在不同业务调用时的差异化，根据业务需要封装自定义组件，组件化不仅可以提升代码复用性，同样可以优化项目文件结构，在一个组件中只做一件事，单位业务逻辑代码量会减少很多，提升代码可读性和可维护性。 父组件向子组件传输数据可以使用 props ，子组件与父组件通信时，通过 emit 触发父组件的事件，来通知父组件改变数据。 指令Vue 实现与页面交互，主要就是通过内置指令来实现，像 v-for、v-if、v-bind、v-on 等指令，很容易理解其用法。 同样我们也根据业务需要可以定制自己的指令，只需要在 Vue 实例中注册即可，一处定义，整个项目内部都可以使用。 路由路由 vue-router 其实不在 Vue 的核心代码中，是作为插件的方式由官方开发的，与 Vue 深度集成，用于管理 url 路径与组件间的映射关系。 状态管理我们知道 React 初开始流行的一大原因就是 单向数据流，为前端项目规范化提供了一个很好的概念，极大的提升了项目的维护便利性。 单向数据流 的意思是将业务数据按模块整合到一起取名叫 store，每个模块存放数据的区域叫 state，页面上的每一个业务操作都发起一个动作 action，在 action 内部向后台发起请求，根据请求返回的数据来根据需要提交修改 mutation，则 mutation 来修改当前模块 state 中的数据，每个操作都遵循这个规范，再加上日志打印，在数据出现错误时很方便可以追踪到导致数据错误的操作，由此来定位业务逻辑错误，增加了很多便利性和逻辑可控性。 在 Vue 中同样也有状态管理，简单的模块内同步数据与页面效果使用成本更低 双向数据绑定 功能即可实现，但有更复杂的业务逻辑和很多组件共用数据时，更推荐的用法是官方的插件 vuex，该插件提供了与上述 React 一样的单向数据流管理逻辑。]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>mvvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何更新并自动同步 Linux 时间]]></title>
    <url>%2F2017%2F02%2F07%2Flinux%2FHow-To-Update-Linux-Time%2F</url>
    <content type="text"><![CDATA[很多人经常会发现 Linux 的时间不知道什么时候就不对了，如果刚好是作为某个业务系统的后台或数据库服务器的话就会引来一系列的麻烦，系统里很多数据的时间不对了，对排错和处理数据也会带来相当的工作量，这篇文章主要是讲解如何更新并自动同步 Linux 的时间。 只更新一次时间： 安装 ntp 工具1$ yum install ntp -y 同步一次服务器时间1$ ntpdate -u us.pool.ntp.org 自动同步时间: 设置定时同步时间任务，每 10 分钟执行一次1$ crontab -e 注: 在打开的窗口中输入 */10 * * * * /usr/sbin/ntpdate -u us.pool.ntp.org。 如果发现上一步操作中提示没有 crontab, 则请先执行此步骤安装 crontab 服务后再执行上一步操作1$ yum install -y vixie-cron 有些同学可能会问，时区的问题怎么处理？别急，下面附带时区相关操作。 查看服务器时区1$ date -R 注: 如果时区是 +0800 则表示为东八区，在国内的同学就不用去修改时区了。 修改服务器时区12$ rm -rf /etc/localtime$ ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 注: 以上操作是将当前时区修改为上海时区。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ntpdate</tag>
      </tags>
  </entry>
</search>
